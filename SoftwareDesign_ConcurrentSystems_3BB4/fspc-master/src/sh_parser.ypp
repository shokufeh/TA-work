/*
 *  shell parser BISON template
 *
 *  Copyright (C) 2013-2014  Vincenzo Maffione
 *
 *  This program is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation, either version 3 of the License, or
 *  (at your option) any later version.
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

%name-prefix "sh"

%code top {
/* This piece of code goes verbatim at the the top of the generated
   parser implementation. */

using namespace std;

//#define YYERROR_VERBOSE
}

%skeleton "glr.cc" /* -*- C++ -*- */
%require "2.6.90.8-d4fe"

/* Generate a Generic LR parser, instead of a standard LR parser. We need
   this to resolve shift/reduce conflicts at runtime. */
%glr-parser

/* Create a parser header file. This is needed because we define fsplex()
   in another source file (the FLEX generated scanner source file). */
%defines

/* Name of the parser implementation file. */
%output "sh_parser.cpp"

/* Write an extra output file containing verbose descriptions of the parser
    states and what is done for each type of lookahead token in that state
%verbose
*/

%define parser_class_name {ShParser}

/* The parsing context. */
%parse-param { ShDriver& driver }
//%lex-param   { ShDriver& driver }
/* %locations */
%debug
%error-verbose

%code requires {
/* This code will be added to the bison-generated header, included
   (among the others) by the FLEX scanner. */

#include <string>
class ShDriver;

}

%{
%}

/* Bison fundamentally works by asking flex to get the next token, which it
   returns as an object of type "YYSTYPE".  But tokens could be of any
   arbitrary data type!  So we deal with that in Bison by defining a C union
   holding each of the types of tokens that Flex could return, and have Bison
   use that union instead of "int" for the definition of "YYSTYPE": */
%union {
    int int_value;
    std::string *string_ptr;
}



/* Define the terminal symbols, token types we're going to use
(in CAPS by convention), and associate each with a field of the union: */

%token ENDOF 0 "end of file"
/*
%token IF "if"
%token ELSE "else"
%token FI "fi"
%token ELIF "elif"
*/
%token <string_ptr> ID "id"
%token OR "||"
%token AND "&&"
%token EQUAL "=="
%token NOTEQUAL "!="
%token LOE "<="
%token GOE ">="
%token LSHIFT "<<"
%token RSHIFT ">>"
%token <int_value> INTEGER "integer"
%token <string_ptr> variable "variable"

/* Non-terminal symbols. */
%type <int_value> expression base_expression start

%printer    { yyoutput << $$; } <int_value>

%{

/* Definition of the FspTranslator class & callbacks */
#include "sh_driver.hpp"

/* The lex prototype. */
#include "shlex_declaration.hpp"

/* Interactive shell */
#include "shell.hpp"

using namespace sh;

%}

%initial-action
{
  /* Initialize the initial location. */
  //@$.begin.filename = @$.end.filename = &driver.remove_file;
}

%%

/* Start symbol. */
start:
    expression {
        $$ = $1;
        driver.result = $$;
    }
    ;

%left OR;
%left AND;
%left '|';
%left '^';
%left '&';
%left EQUAL NOTEQUAL;
%left '<' '>' LOE GOE;
%left LSHIFT RSHIFT;
%left '+' '-';
%left '*' '/' '%';

/* An expression: standard operators and priorities. */
expression:
    '(' expression ')' {
        $$ = $2;
    }
    | expression OR expression {
        $$ = ($1 || $3);
    }
    | expression AND expression {
        $$ = ($1 && $3);
    }
    | expression '|' expression {
        $$ = ($1 | $3);
    }
    | expression '^' expression {
        $$ = ($1 ^ $3);
    }
    | expression '&' expression {
        $$ = ($1 & $3);
    }
    | expression EQUAL expression {
        $$ = ($1 == $3);
    }
    | expression NOTEQUAL expression {
        $$ = ($1 != $3);
    }
    | expression '<' expression {
        $$ = ($1 < $3);
    }
    | expression '>' expression {
        $$ = ($1 > $3);
    }
    | expression LOE expression {
        $$ = ($1 <= $3);
    }
    | expression GOE expression {
        $$ = ($1 >= $3);
    }
    | expression LSHIFT expression {
        $$ = $1 << $3;
    }
    | expression RSHIFT expression {
        $$ = $1 >> $3;
    }
    | expression '+' expression {
        $$ = $1 + $3;
    }
    | expression '-' expression {
        $$ = $1 - $3;
    }
    | expression '*' expression {
        $$ = $1 * $3;
    }
    | expression '/' expression {
        $$ = $1 / $3;
    }
    | expression '%' expression {
        $$ = $1 % $3;
    }
    | base_expression {
        $$ = $1;
    }
    | '+' base_expression {
        $$ = $2;
    }
    | '-' base_expression {
        $$ = ! $2;
    }
    | '!' base_expression {
        $$ = ! $2;
    }
    ;

base_expression:
    INTEGER {
        $$ = $1;
    }
    | ID {
        int val;

        if (driver.lookup_variable($1, val)) {
            $$ = val;
        } else {
            YYABORT;
        }
    }
    ;

%%

void sh::ShParser::error(const std::string& m)
{
    driver.error(m);
}
