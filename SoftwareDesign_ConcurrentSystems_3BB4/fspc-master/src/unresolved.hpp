/*
 *  fspc unresolved FSP names
 *
 *  Copyright (C) 2013-2014  Vincenzo Maffione
 *
 *  This program is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation, either version 3 of the License, or
 *  (at your option) any later version.
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */


#ifndef __UNRESOLVED__HH__
#define __UNRESOLVED__HH__

#include <vector>
#include <string>

using namespace std;


/* An element of the UnresolveNames table. */
struct UnresolvedElem {
    /* An FSP name. */
    string name;
    /* True if the name has been defined, false if the name has
       never been defined (only referenced). */
    bool defined;
};

/* This class contains a table representing unresolved names (in our case FSP
   names). Each entry is used to store the relationship between a numeric
   index (idx) and one or more names.
   As an example:
    =================================
    | idx  | names                  |
    =================================
    |  36  | P[3]                   |
    |  59  | P[8], Q[0]             |
    |  8   | Proc, Q[24], P[2][9]   |
    =================================

   Each index has two purposes:
        @ it is an alias for multiple names.
        @ it is easily stored in the Lts priv field.

   The indexes are automatically generated by the class itself. The user
   only provides the names.
 */
class UnresolvedNames {
        vector< vector<UnresolvedElem> > names;

    public:
        unsigned int insert(const string& name, bool defined);
        unsigned int append(const string& name, unsigned int idx,
                            bool defined);
        unsigned int size() const { return names.size(); }
        unsigned int get_idx(unsigned int i) const;
        string get_name(unsigned int i) const;
        string lookup(unsigned int idx) const;
        bool defined(const string& s) const;
        void clear();
};

#endif  /* __UNRESOLVED__HH__ */
